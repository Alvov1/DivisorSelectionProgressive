#include <iostream>
#include <fstream>
#include <filesystem>
#include "Aesi.h"
#include "Timer.h"

const struct { unsigned x {}; unsigned y {}; } gridDim = { 64, 1 }, blockDim = { 64, 1 }, blockIdx = { 0, 0 }, threadIdx = { 0, 0 };

const unsigned threadId = 3,//blockDim.x * blockIdx.x + threadIdx.x,
threadsCount = gridDim.x * blockDim.x,
        iterationBorder = 64,
        bStart = 2 + blockIdx.x,
        bShift = gridDim.x,
        bMax = 2'000'000'000U;
using Uns = Aesi<8192>;






std::vector<uint64_t> loadPrimes(const std::filesystem::path& fromLocation) {
    if(!std::filesystem::is_regular_file(fromLocation))
        throw std::invalid_argument("Failed to load prime table: bad input file");

    std::ifstream input(fromLocation, std::ios::binary);
    uint64_t buffer {}; input.read(reinterpret_cast<char*>(&buffer), sizeof(uint64_t));

    std::vector<uint64_t> primes (buffer);
    for(auto& prime: primes)
        input.read(reinterpret_cast<char*>(&prime), sizeof(uint64_t));

    return primes;
}

std::vector<Uns> loadPowers(const std::filesystem::path& fromLocation) {
    if(!std::filesystem::is_regular_file(fromLocation))
        throw std::invalid_argument("Failed to load powers table: bad input file");

    const auto recordsNumber = static_cast<std::size_t>(std::filesystem::file_size(fromLocation) / (static_cast<std::size_t>(Uns::getBitness() / 8)));
    std::vector<Uns> records (recordsNumber);

    std::ifstream input(fromLocation, std::ios::binary);
    for(auto& value: records)
        value.readBinary(input);

    return records;
}





Uns countEBasic(unsigned B, const std::vector<uint64_t>& primes) {
    auto primeUl = primes[0];

    Uns e = 1;

    for (unsigned pi = 0; primeUl < B && pi < primes.size(); ++pi) {
        const auto power = static_cast<unsigned>(log(static_cast<double>(B)) / log(static_cast<double>(primeUl)));
        e *= static_cast<uint64_t>(pow(static_cast<double>(primeUl), static_cast<double>(power)));
        primeUl = primes[pi + 1];
    }

    return e;
}

void preparePowers(const std::vector<uint64_t>& primes, const std::filesystem::path& outputLocation) {
    Uns previous = 0;

    std::ofstream output(outputLocation, std::ios::binary);

    for (unsigned B = bStart; ; B++) {
        const auto e = countEBasic(B, primes);

        if(e != previous) {
            if(e.bitCount() >= 32)
                e.writeBinary(output);

            previous = e;

            if(e.bitCount() >= static_cast<std::size_t>(Uns::getBitness() * 0.99))
                break;
        }
    }
}





void kernel(const std::vector<uint64_t>& primes, std::pair<Uns, Uns>& numberAndFactor) {
    auto& [n, factor] = numberAndFactor;
    const auto checkFactor = [&n, &factor] (const Uns& candidate) {
        if(candidate < 2 || candidate >= n)
            return false;
        factor = candidate; return true;
    };

    uint64_t a = threadId * iterationBorder + 2;
    for (unsigned B = bStart; B < bMax; B += bShift) {
        const Uns e = countEBasic(B, primes);
        if (e == 1) continue;

        for (unsigned it = 0; it < iterationBorder; ++it) {
            if(!factor.isZero())
                return;

            if(checkFactor(Uns::gcd(Uns::powm(a, e, n) - 1, n)))
                return;

            a += threadsCount * iterationBorder;
        }
    }
}

void kernel(const std::vector<Uns>& powers, std::pair<Uns, Uns>& numberAndFactor) {
    auto& [n, factor] = numberAndFactor;
    const auto checkFactor = [&n, &factor] (const Uns& candidate) {
        if(candidate < 2 || candidate >= n)
            return false;
        factor = candidate; return true;
    };

    uint64_t a = threadId * iterationBorder + 2;
    for(unsigned i = threadId; i < powers.size(); i += blockDim.x) {
        for(unsigned it = 0; it < iterationBorder; ++it) {
            if(!factor.isZero())
                return;

            if(checkFactor(Uns::gcd(Uns::powm(a, powers[i], n) - 1, n)))
                return;

            a += threadsCount * iterationBorder;
        }
    }
}




int main(int argc, const char* const* const argv) {
    try {
        if (argc < 3)
            return std::printf("Usage: %s <number> <primes location>", argv[0]);

        std::pair<Uns, Uns> numberAndFactor = { { std::string_view(argv[1]) }, { 0 } };
        Timer::init() << "Factorizing number " << std::hex << std::showbase << numberAndFactor.first <<
            std::dec << " (" << numberAndFactor.first.bitCount() << " bits)." << Timer::endl;

        const auto values = loadPrimes(argv[2]); //loadPowers(argv[2]);
        Timer::out << "Loaded table of primes with " << values.size() << " elements." << Timer::endl;

        kernel(values, numberAndFactor);
        if (numberAndFactor.second != 0 && numberAndFactor.first % numberAndFactor.second != 0)
            Timer::out << "Found factor: " << std::hex << std::showbase << numberAndFactor.second << Timer::endl;
        else Timer::out << "Factor is not fount or incorrect" << Timer::endl;
    } catch (const std::exception& e) {
        return std::printf("Failed: %s.\n", e.what());
    }
    return 0;
}
